using System;
using System.Linq;
using Application.Common.AppSettingHelpers.Main;
using Blog.Common.Localization;
using Domain.Entities;
using Infrastructure.Persistence;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.IdentityModel.Tokens;
using NSwag;
using NSwag.Generation.Processors.Security;

namespace Blog.Common.Extensions
{
    public static class ServiceProviderExtensions
    {
        public static IServiceCollection AddAspIdentityJwt(
            this IServiceCollection services
            , IConfiguration configuration)
        {
            var passwordIdentitySettings = configuration
                .GetSection(nameof(PasswordIdentitySettings))
                .Get<PasswordIdentitySettings>();

            services.AddIdentity<AppUser, IdentityRole<int>>(options =>
                {
                    options.Password.RequiredLength =
                        passwordIdentitySettings.RequiredLength;

                    options.Password.RequireNonAlphanumeric =
                        passwordIdentitySettings.RequireNonAlphanumeric;

                    options.Password.RequireLowercase =
                        passwordIdentitySettings.RequireLowercase;

                    options.Password.RequireUppercase =
                        passwordIdentitySettings.RequireUppercase;

                    options.Password.RequireDigit =
                        passwordIdentitySettings.RequireDigit;

                    options.User.RequireUniqueEmail = true;

                    options.Tokens.PasswordResetTokenProvider =
                        TokenOptions.DefaultPhoneProvider;
                })
                .AddEntityFrameworkStores<AppDbContext>()
                .AddUserStore<UserStore<AppUser, IdentityRole<int>
                    , AppDbContext, int>>()
                .AddRoleStore<RoleStore<IdentityRole<int>
                    , AppDbContext, int>>()
                .AddDefaultTokenProviders()
                .AddErrorDescriber<LocalizedIdentityErrorDescriber>();

            var authOptions = configuration
                .GetSection(nameof(AuthOptions))
                .Get<AuthOptions>();

            services.AddAuthentication(options =>
                {
                    options.DefaultChallengeScheme =
                        JwtBearerDefaults.AuthenticationScheme;

                    options.DefaultSignInScheme =
                        JwtBearerDefaults.AuthenticationScheme;

                    options.DefaultAuthenticateScheme =
                        JwtBearerDefaults.AuthenticationScheme;
                })
                .AddJwtBearer(JwtBearerDefaults.AuthenticationScheme, options =>
                {
                    options.RequireHttpsMetadata =
                        authOptions.RequireHttpsMetadata;

                    options.TokenValidationParameters = new TokenValidationParameters
                    {
                        ValidateIssuer = true,
                        ValidIssuer = authOptions.Issuer,
                        ValidateAudience = true,
                        ValidAudience = authOptions.Audience,
                        ValidateLifetime = true,
                        ValidateIssuerSigningKey = true,
                        IssuerSigningKey = authOptions.SymmetricSecurityKey,
                        ClockSkew = TimeSpan.Zero
                    };
                });

            return services;
        }

        public static IServiceCollection AddAutoGeneratedApi(
            this IServiceCollection services)
        {
            services.AddOpenApiDocument(configure =>
            {
                configure.Title = "Blog API";
                configure.AddSecurity("JWT", Enumerable.Empty<string>(),
                    new OpenApiSecurityScheme
                    {
                        Type = OpenApiSecuritySchemeType.ApiKey,
                        Name = "Authorization",
                        In = OpenApiSecurityApiKeyLocation.Header,
                        Description =
                            "Type into the textbox: Bearer {your JWT token}."
                    });

                configure.OperationProcessors.Add(
                    new AspNetCoreOperationSecurityScopeProcessor("JWT"));
            });

            return services;
        }
    }
}