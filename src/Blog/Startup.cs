using Application;
using Blog.Common.Extensions;
using Blog.Common.Middlewares;
using Domain.Enums;
using Domain.Helpers;
using Infrastructure;
using Infrastructure.Persistence;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Localization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;

namespace Blog
{
    public class Startup
    {
        public Startup(IConfiguration configuration
            , IWebHostEnvironment hostEnvironment)
        {
            Configuration = configuration;
            WebHostEnvironment = hostEnvironment;
        }

        public IConfiguration Configuration { get; }

        public IWebHostEnvironment WebHostEnvironment { get; }

        public void ConfigureServices(IServiceCollection services)
        {
            services.AddLocalization(options => options.ResourcesPath = "Resources");
            services.AddControllers()
                .SetCompatibilityVersion(CompatibilityVersion.Version_3_0);

            services.AddInfrastructure(Configuration);
            services.AddApplication(Configuration, WebHostEnvironment.ContentRootPath);
            services.AddAspIdentityJwt(Configuration);

            services.Configure<ApiBehaviorOptions>(options =>
            {
                options.SuppressModelStateInvalidFilter = true;
            });

            services.AddCors(options =>
            {
                options.AddPolicy("EnableCORS",
                    builder =>
                    {
                        builder.AllowAnyOrigin()
                            .AllowAnyHeader()
                            .AllowAnyMethod();
                    });
            });

            services.AddAutoGeneratedApi();
            services.AddHealthChecks()
                .AddDbContextCheck<AppDbContext>();
        }

        public void Configure(IApplicationBuilder app)
        {
            if (WebHostEnvironment.IsDevelopment())
            {
                app.UseCors("EnableCORS");
                app.UseDeveloperExceptionPage();
                app.UseDatabaseErrorPage();
            }
            else
            {
                app.UseExceptionHandler("/Error");
                app.UseHsts();
                app.UseHttpsRedirection();
            }

            var supportedCultures = CulturesHelper.GetSupportedCulturesInfo();
            app.UseRequestLocalization(new RequestLocalizationOptions
            {
                DefaultRequestCulture =
                    new RequestCulture(Cultures.RU.GetEnumDescription()),
                SupportedCultures = supportedCultures,
                SupportedUICultures = supportedCultures
            });

            app.UseCustomExceptionHandler();
            app.UseHealthChecks("/health");

            const string SpecificationRoute = "/api/specification.json";
            app.UseOpenApi(settings => settings.Path = SpecificationRoute);
            app.UseSwaggerUi3(settings =>
            {
                settings.Path = "/api";
                settings.DocumentPath = SpecificationRoute;
            });

            app.UseRouting();
            app.UseAuthentication();
            app.UseAuthorization();

            app.UseEndpoints(endpoints => { endpoints.MapControllers(); });
        }
    }
}